{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "import numpy as np \n",
    "import os \n",
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>address</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>description</th>\n",
       "      <th>star</th>\n",
       "      <th>full_address</th>\n",
       "      <th>postal_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Sushi Inoue</td>\n",
       "      <td>381 Lenox Ave</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>ONE STAR for this Japanese restaurant in Harlem.</td>\n",
       "      <td>1</td>\n",
       "      <td>381 Lenox Ave, New York, NY 10027</td>\n",
       "      <td>10027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Dovetail</td>\n",
       "      <td>103 W 77th St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>John Fraser's UWS fine dining restaurant has O...</td>\n",
       "      <td>1</td>\n",
       "      <td>103 W 77th St, New York, NY 10024</td>\n",
       "      <td>10024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Cafe Boulud</td>\n",
       "      <td>20 E 76th St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Daniel Boulud's beloved Upper East Side restau...</td>\n",
       "      <td>1</td>\n",
       "      <td>20 E 76th St, New York, NY 10021</td>\n",
       "      <td>10021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Jean-Georges</td>\n",
       "      <td>1 Central Park West</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Jean-Georges Vongerichten's flagship restauran...</td>\n",
       "      <td>2</td>\n",
       "      <td>1 Central Park West, New York, NY 10023</td>\n",
       "      <td>10023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Masa</td>\n",
       "      <td>10 Columbus Cir</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Masa Takayama's pricey sushi restaurant has TH...</td>\n",
       "      <td>3</td>\n",
       "      <td>10 Columbus Cir, New York, NY 10019</td>\n",
       "      <td>10019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7</td>\n",
       "      <td>Marea</td>\n",
       "      <td>240 Central Park S</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Michael White's Central Park South Italian sea...</td>\n",
       "      <td>2</td>\n",
       "      <td>240 Central Park S, New York, NY 10019</td>\n",
       "      <td>10019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>60 E 65th St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Daniel Boulud's Upper East Side French restaur...</td>\n",
       "      <td>2</td>\n",
       "      <td>60 E 65th St, New York, NY 10065</td>\n",
       "      <td>10065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9</td>\n",
       "      <td>Torishin</td>\n",
       "      <td>362 W 53rd St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>This terrific izakaya has ONE STAR.</td>\n",
       "      <td>1</td>\n",
       "      <td>362 W 53rd St, New York, NY 10019</td>\n",
       "      <td>10019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10</td>\n",
       "      <td>Le Bernardin</td>\n",
       "      <td>155 W 51st St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Eric Ripert's beloved seafood restaurant has T...</td>\n",
       "      <td>3</td>\n",
       "      <td>155 W 51st St, New York, NY 10019</td>\n",
       "      <td>10019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>11</td>\n",
       "      <td>The Modern</td>\n",
       "      <td>9 W 53rd St</td>\n",
       "      <td>New York</td>\n",
       "      <td>NY</td>\n",
       "      <td>Danny Meyer's Midtown restaurant with chef Abr...</td>\n",
       "      <td>2</td>\n",
       "      <td>9 W 53rd St, New York, NY 10019</td>\n",
       "      <td>10019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0           name              address       city state  \\\n",
       "0           1    Sushi Inoue        381 Lenox Ave   New York    NY   \n",
       "1           2       Dovetail        103 W 77th St   New York    NY   \n",
       "2           3    Cafe Boulud         20 E 76th St   New York    NY   \n",
       "3           4   Jean-Georges  1 Central Park West   New York    NY   \n",
       "4           5           Masa      10 Columbus Cir   New York    NY   \n",
       "5           7          Marea   240 Central Park S   New York    NY   \n",
       "6           8         Daniel         60 E 65th St   New York    NY   \n",
       "7           9       Torishin        362 W 53rd St   New York    NY   \n",
       "8          10   Le Bernardin        155 W 51st St   New York    NY   \n",
       "9          11     The Modern          9 W 53rd St   New York    NY   \n",
       "\n",
       "                                         description  star  \\\n",
       "0   ONE STAR for this Japanese restaurant in Harlem.     1   \n",
       "1  John Fraser's UWS fine dining restaurant has O...     1   \n",
       "2  Daniel Boulud's beloved Upper East Side restau...     1   \n",
       "3  Jean-Georges Vongerichten's flagship restauran...     2   \n",
       "4  Masa Takayama's pricey sushi restaurant has TH...     3   \n",
       "5  Michael White's Central Park South Italian sea...     2   \n",
       "6  Daniel Boulud's Upper East Side French restaur...     2   \n",
       "7                This terrific izakaya has ONE STAR.     1   \n",
       "8  Eric Ripert's beloved seafood restaurant has T...     3   \n",
       "9  Danny Meyer's Midtown restaurant with chef Abr...     2   \n",
       "\n",
       "                              full_address  postal_code  \n",
       "0        381 Lenox Ave, New York, NY 10027        10027  \n",
       "1        103 W 77th St, New York, NY 10024        10024  \n",
       "2         20 E 76th St, New York, NY 10021        10021  \n",
       "3  1 Central Park West, New York, NY 10023        10023  \n",
       "4      10 Columbus Cir, New York, NY 10019        10019  \n",
       "5   240 Central Park S, New York, NY 10019        10019  \n",
       "6         60 E 65th St, New York, NY 10065        10065  \n",
       "7        362 W 53rd St, New York, NY 10019        10019  \n",
       "8        155 W 51st St, New York, NY 10019        10019  \n",
       "9          9 W 53rd St, New York, NY 10019        10019  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fine_dine_df = pd.read_csv(\"mich_rests.csv\")\n",
    "fine_dine_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "postal_code\n",
       "10001    2\n",
       "10002    2\n",
       "10003    7\n",
       "10009    1\n",
       "10010    4\n",
       "10011    7\n",
       "10012    8\n",
       "10013    3\n",
       "10014    2\n",
       "10016    3\n",
       "10017    4\n",
       "10018    2\n",
       "10019    5\n",
       "10021    1\n",
       "10022    2\n",
       "10023    2\n",
       "10024    1\n",
       "10027    1\n",
       "10036    3\n",
       "10065    1\n",
       "10281    1\n",
       "11101    1\n",
       "11201    2\n",
       "11206    1\n",
       "11211    2\n",
       "11237    1\n",
       "11238    1\n",
       "11249    2\n",
       "Name: postal_code, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zip_group = fine_dine_df.groupby('postal_code')\n",
    "\n",
    "count_zip = zip_group['postal_code'].count()\n",
    "\n",
    "count_zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count_zip_chart = count_zip.plot(kind = 'bar')\n",
    "\n",
    "count_zip_chart.set_xlabel(\"Zip Code\")\n",
    "\n",
    "count_zip_chart.set_ylabel(\"Number of Michelin Restaurants\")\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:PythonData=3.6] *",
   "language": "python",
   "name": "conda-env-PythonData_3.6-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
